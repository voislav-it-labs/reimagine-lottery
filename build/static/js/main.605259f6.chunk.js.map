{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["users","USE_DELAYED_STOP","INITIAL_SPEED","User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","entering","_animate","react_default","a","createElement","style","animationDuration","concat","speed","className","name","prevProps","_this2","setTimeout","setState","Component","App","_this3","toggleStarted","stopping","clearTimeout","winnerTickTimeout","started","toggledState","changePotentialWinner","winnerTick","delayedStop","setWinner","console","log","currentWinner","potentialWinner","currentWinnerIndex","indexOf","nextWinnerIndex","length","winners","toConsumableArray","filter","u","decreeseSpeed","increase","interval","pipe","take","tap","finalize","subscribe","onKeySpaceEnter","event","keyCode","winnerIndex","Math","round","winner","document","addEventListener","removeEventListener","_this$state","type","onClick","App_User","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.605259f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// import faker from 'faker';\nimport { interval } from 'rxjs';\nimport { take, tap, finalize } from 'rxjs/operators';\n\n// const users = [];\n// for (let i = 0; i < 5; i++) {\n//   users.push(faker.name.firstName() + \" \" + faker.name.lastName());\n// }\nconst users = [\n  'Voislav Mishevski',\n  'Blagoj Janev',\n  'Aleksandra Vinokikj',\n  'Ivan Klandev',\n  'Aleksandra Koceva'\n];\n\nconst USE_DELAYED_STOP = true;\nconst INITIAL_SPEED = 250;\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {entering: true};\n    this._animate();\n  }\n  render() {\n    const {entering} = this.state;\n\n    return (\n      <li style={{'animationDuration': `${this.props.speed}ms`}} className={entering ? 'winner' : 'almost-winner'}>{this.props.name}</li>\n    )\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.name !== prevProps.name) {\n      this._animate();\n    }\n  }\n\n  _animate() {\n    setTimeout(() => this.setState({entering: true}));\n    setTimeout(() => {\n      this.setState({entering: false});\n    }, this.props.speed);\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentWillMount() {\n    const winnerIndex = Math.round(users.length/2);\n    const winner = users[winnerIndex]\n    this.setState({\n      users: users,\n      winners: [],\n      potentialWinner: winner,\n      speed: INITIAL_SPEED,\n      started: false,\n      stopping: false\n    });\n\n    document.addEventListener('keyup', this.onKeySpaceEnter);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.onKeySpaceEnter);\n  }\n\n  render() {\n    const {winners, potentialWinner, speed, started} = this.state;\n\n    return (\n      <div className=\"App\">\n        <div>\n          <button type=\"button\" className={started ? 'btn btn-stop' : 'btn btn-start'} onClick={this.toggleStarted}>\n            <h3>{started ? 'Stop' : 'Start'}</h3>\n          </button>\n        </div>\n        <div className=\"\">\n          {started && <ul className=\"App-all-users\">\n            <User name={potentialWinner} winner={true} speed={speed/2}></User>\n          </ul>}\n        </div>\n        {!!winners.length && (\n          <div>\n            <div>Winners:</div>\n            {winners.map(winner => <div key={winner}>{winner}</div>)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  toggleStarted = () => {\n    if (this.state.stopping) {\n      return;\n    }\n\n    clearTimeout(this.winnerTickTimeout);\n    \n    const {started} = this.state;\n    const toggledState = !started;\n\n    if (!started) {\n      this.changePotentialWinner();\n      this.winnerTick();\n      this.setState({\n        started: toggledState\n      });\n    }\n\n    if (!toggledState) {\n      if (!USE_DELAYED_STOP) {\n        this.setWinner();\n        \n      } else {\n        this.delayedStop();\n      }\n    }\n  }\n\n  winnerTick = () => {\n    console.log('next tick in', this.state.speed);\n    this.winnerTickTimeout = setTimeout(() => {\n      this.changePotentialWinner();\n      this.winnerTick();\n    }, this.state.speed);\n  }\n\n  changePotentialWinner = () => {\n    const currentWinner = this.state.potentialWinner;\n    const currentWinnerIndex = this.state.users.indexOf(currentWinner);\n    const nextWinnerIndex = currentWinnerIndex === (this.state.users.length -1) ? 0 : (currentWinnerIndex + 1);\n    \n    this.setState({\n      potentialWinner: this.state.users[nextWinnerIndex]\n    });\n  }\n\n  setWinner = () => {\n    this.setState((state) => {\n      return {\n        winners: [...state.winners, state.potentialWinner],\n        started: false,\n        stopping: false,\n        users: state.users.filter(u => u !== state.potentialWinner),\n        speed: INITIAL_SPEED\n      }\n    });\n  }\n\n  delayedStop = () => {\n    clearTimeout(this.winnerTickTimeout);\n    this.setState({\n      stopping: true\n    });\n\n    this.decreeseSpeed();\n    this.winnerTick();\n\n  }\n\n  decreeseSpeed = () => {\n    const lastSpeed = 2000;\n    const countOfNextIterations = 10;\n    const increase = (lastSpeed - INITIAL_SPEED) / countOfNextIterations;\n    \n    interval(500).pipe(\n      take(countOfNextIterations),\n      tap(() => {\n        console.log('ddd')\n        this.setState((state) => ({speed: state.speed + increase}));\n      }),\n      finalize(() => {\n        clearTimeout(this.winnerTickTimeout);\n        this.setWinner();\n      })\n    )\n    .subscribe(() => {\n      console.log('decreesing speed');\n    });\n\n  }\n\n  onKeySpaceEnter = (event) => {\n    // only on space\n    if (event.keyCode === 32) {\n      this.toggleStarted()\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}